{"version":3,"sources":["../src/sullivan.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOqB,WACnB,SADmB,QACnB,OAAuD;mCAA1C,oBAA0C;MAA1C,4DAAsB,8BAAoB;MAAb,6BAAa;;wBADpC,UACoC;;MAEnD,eAME,WANF,aAFmD;MAGnD,IAKE,WALF,EAHmD;MAInD,KAIE,WAJF,GAJmD;4BAQjD,WAHF,QALmD;MAKnD,8CAAU,2BALyC;0BAQjD,WAFF,MANmD;MAMnD,0CAAQ,yBAN2C;;MAOhD,4CACD;;;AARiD;;AAWrD,MAAI,KAAJ,EAAW;AACT,6BAAU,KAAV,EAAiB,gBAAjB,EADS;GAAX;;AAIA,MAAI,OAAJ,EAAa;AACX,iCAAc,OAAd,EADW;GAAb;;AAIA,MAAM,cAAc,EAAd,CAnB+C;AAoBrD,MAAM,IAAI,qBAAM,gBAAN,CAAJ,CApB+C;;AAsBrD,OAAK,KAAL,GAAa,OAAO,IAAP,CAAY,CAAZ,EAAe,MAAf,CAAsB,UAAC,CAAD,EAAI,CAAJ,EAAU;;;;AAI3C,gBAAY,CAAZ,IAAiB,sBAAO,EAAE,CAAF,CAAP,EAAa,UAAC,CAAD;aAAO,sBAAW,CAAX;KAAP,CAA9B,CAJ2C;AAK3C,QAAI,mBAAJ,EAAyB;AACvB,QAAE,CAAF,IAAO,oBAAoB,MAApB,CAA2B,sBAAO,EAAE,CAAF,CAAP,EAAa,UAAC,CAAD;eAAO,CAAC,sBAAW,CAAX,CAAD;OAAP,CAAxC,CAAP,CADuB;KAAzB;AAGA,WAAO,CAAP,CAR2C;GAAV,EAShC,EATU,CAAb,CAtBqD;;AAmCrD,OAAK,QAAL,GAAgB,CAAhB,CAnCqD;AAoCrD,OAAK,MAAL,GAAc,WAAd,CApCqD;;AAsCrD,MAAI,YAAJ,EAAkB;AAChB,SAAK,EAAL,GAAU,oCAAqB,YAArB,CAAV,CADgB;GAAlB;;AAIA,MAAI,CAAJ,EAAO;AACL,SAAK,CAAL,GAAS,EAAE,EAAF,CAAT,CADK;GAAP;;AAKA,OAAK,UAAL,GAAkB,UAAlB,CA/CqD;AAgDrD,OAAK,SAAL,uBAhDqD;CAAvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBADmB","file":"sullivan.js","sourcesContent":["import utils from './utils';\nimport pickBy from 'lodash.pickby';\nimport generateMediaQueries from './utils/generate-media-queries';\nimport injectCss from './utils/inject-css';\nimport injectTypekit from './utils/inject-typekit';\nimport isFunction from 'lodash.isfunction';\n\nexport default class Sullivan {\n  constructor({aphroditeStylesheet = false, styleguide}) {\n    const {\n      mediaQueries,\n      z,\n      _z,\n      typekit = null,\n      reset = null,\n      ...restOfStyleguide\n    } = styleguide;\n\n    // Inject reset and typekit if configured to do so.\n    if (reset) {\n      injectCss(reset, 'sullivan-reset');\n    }\n\n    if (typekit) {\n      injectTypekit(typekit);\n    }\n\n    const inlineUtils = {};\n    const u = utils(restOfStyleguide);\n\n    this.utils = Object.keys(u).reduce((p, c) => {\n      // Filter out inline (function) style utils.\n      // Generate class names if aphrodite is available\n\n      inlineUtils[c] = pickBy(u[c], (v) => isFunction(v));\n      if (aphroditeStylesheet) {\n        p[c] = aphroditeStylesheet.create(pickBy(u[c], (v) => !isFunction(v)));\n      }\n      return p;\n    }, {});\n\n\n\n    this.rawUtils = u;\n    this.inline = inlineUtils;\n\n    if (mediaQueries) {\n      this.mq = generateMediaQueries(mediaQueries);\n    }\n\n    if (z) {\n      this.z = z(_z);\n    }\n\n\n    this.styleguide = styleguide;\n    this.injectCss = injectCss;\n  }\n}\n\n\n\n\n\n\n// import { StyleSheet, css } from 'aphrodite';\n// import utils from './utils';\n// import pickBy from 'lodash.pickby';\n// import generateMediaQueries from './generateMediaQueries';\n// import isFunction from 'lodash.isfunction';\n\n// export default class Sullivan {\n//   constructor({ sizes, colors, textSizes, lineHeights, z, mediaQueries}) {\n//     this.sheet = StyleSheet;\n//     this.class = css;\n\n//     const D = {};\n\n//     const u = utils({\n//       sizes,\n//       colors,\n//       textSizes,\n//       lineHeights,\n//       z\n//     });\n\n//     this.utils = Object.keys(u).reduce((p, c) => {\n//       // filter out dynamic styles\n//       // create class names\n//       D[c] = pickBy(u[c], (v) => isFunction(v));\n//       p[c] = this.sheet.create(pickBy(u[c], (v) => !isFunction(v)));\n//       return p;\n//     }, {});\n\n\n\n//     this.rawUtils = u;\n//     this.inline = D;\n\n//     if (mediaQueries) {\n//       this.mq = generateMediaQueries(mediaQueries);\n//     }\n\n//   }\n// }\n"]}